{
  "name": "Jesse — AI Syllabi Analysis Agent",
  "nodes": [
    {
      "parameters": {},
      "id": "Start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            { "name": "SEED_SYLLABI", "value": "https://example.edu/course/cs101/syllabus.pdf; https://another.edu/ai/ai101_syllabus.pdf" },
            { "name": "CONFIDENCE_THRESHOLD", "value": "0.70" },
            { "name": "MAX_SOURCES", "value": "3" },
            { "name": "DISCORD_CHANNEL_ID", "value": "" }
          ]
        }
      },
      "id": "Config",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "content": "={\n  \"rules\": [\n    \"Look for 'Learning Outcomes' or 'Course Objectives' sections\",\n    \"Learning outcomes often begin with 'Students will be able to' or similar phrases\",\n    \"Course codes typically follow format of department prefix + number (e.g., CS101)\",\n    \"Extract instructor name and contact information when available\"\n  ],\n  \"keywords\": [\n    \"learning outcomes\",\n    \"objectives\",\n    \"competencies\",\n    \"syllabus\",\n    \"assessment\",\n    \"readings\",\n    \"textbook\",\n    \"prerequisites\",\n    \"grading\"\n  ],\n  \"regexes\": [\n    \"/[A-Z]{2,4}\\\\s?\\\\d{3,4}/i\",  \n    \"/(?:Spring|Fall|Summer|Winter)\\\\s\\\\d{4}/i\",\n    \"/\\\\b(?:Dr\\\\.|Professor|Prof\\\\.)\\\\s[A-Z][a-z]+\\\\s[A-Z][a-z]+/\"\n  ],\n  \"notes\": [\n    \"Focus on academic terminology common in syllabi\",\n    \"Outcome statements typically use action verbs from Bloom's taxonomy\"\n  ]\n}",
        "options": {}
      },
      "id": "DemoDistilledRules",
      "name": "Demo Distilled Rules",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [500, 200]
    },
    {
      "parameters": {
        "content": "={\n  \"domains\": [\n    \"computer science\",\n    \"data science\",\n    \"artificial intelligence\",\n    \"machine learning\",\n    \"software engineering\"\n  ],\n  \"skills\": [\n    {\n      \"id\": \"python_programming\",\n      \"name\": \"Python Programming\",\n      \"domain\": \"computer science\",\n      \"related\": [\"programming\", \"software development\"]\n    },\n    {\n      \"id\": \"machine_learning_fundamentals\",\n      \"name\": \"Machine Learning Fundamentals\",\n      \"domain\": \"artificial intelligence\",\n      \"related\": [\"data science\", \"statistics\"]\n    },\n    {\n      \"id\": \"data_visualization\",\n      \"name\": \"Data Visualization\",\n      \"domain\": \"data science\",\n      \"related\": [\"data analysis\", \"business intelligence\"]\n    },\n    {\n      \"id\": \"software_engineering_principles\",\n      \"name\": \"Software Engineering Principles\",\n      \"domain\": \"software engineering\",\n      \"related\": [\"software development\", \"project management\"]\n    },\n    {\n      \"id\": \"database_management\",\n      \"name\": \"Database Management\",\n      \"domain\": \"computer science\",\n      \"related\": [\"data science\", \"information systems\"]\n    }\n  ]\n}",
        "options": {}
      },
      "id": "DemoTaxonomy",
      "name": "Demo Skills Taxonomy",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "content": "={\n  \"search_queries\": [\n    \"site:.edu syllabus data science pdf\",\n    \"site:.edu \\\"machine learning\\\" syllabus filetype:pdf\",\n    \"site:.edu computer science course syllabus filetype:pdf\"\n  ],\n  \"crawl_budget\": 20,\n  \"priority_rules\": [\n    \"prefer official .edu domains\",\n    \"prefer PDFs with ToC or headings\",\n    \"prefer recent syllabi (within last 2 years)\"\n  ],\n  \"extraction_instructions\": {\n    \"target_fields\": [\n      \"course_code\",\n      \"course_title\",\n      \"term\",\n      \"instructor\",\n      \"program\",\n      \"learning_outcomes\",\n      \"competencies\",\n      \"topics\",\n      \"readings\",\n      \"assessments\",\n      \"modality\",\n      \"workload\",\n      \"tools\"\n    ],\n    \"zero_shot_policy\": \"treat unfamiliar outcome phrasings as novel competencies; extract anyway\",\n    \"few_shots\": [\n      {\n        \"text\": \"Learning Outcomes: Students will be able to implement supervised ML algorithms and evaluate models.\",\n        \"output\": {\n          \"learning_outcomes\": [\n            \"implement supervised ML algorithms\",\n            \"evaluate models\"\n          ],\n          \"competencies\": [\n            \"model implementation\",\n            \"model evaluation\"\n          ]\n        }\n      },\n      {\n        \"text\": \"By the end, learners can articulate ethical implications of AI in healthcare.\",\n        \"output\": {\n          \"learning_outcomes\": [\n            \"articulate ethical implications of AI in healthcare\"\n          ],\n          \"competencies\": [\n            \"AI ethics in healthcare\"\n          ]\n        }\n      }\n    ]\n  },\n  \"alignment_policy\": {\n    \"strategy\": \"semantic-match-to-taxonomy-if-available\",\n    \"accept_threshold\": 0.65\n  },\n  \"distillation_policy\": {\n    \"emit_keywords\": true,\n    \"emit_patterns\": true\n  }\n}",
        "options": {}
      },
      "id": "DemoPlan",
      "name": "Demo LLM Plan",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse the controller plan\nlet plan;\ntry {\n  const planData = $node['DemoPlan'].json;\n  if (typeof planData === 'string') {\n    plan = JSON.parse(planData);\n  } else {\n    plan = planData;\n  }\n} catch (e) {\n  console.log('Error parsing plan:', e.message);\n  plan = {\n    extraction_instructions: {\n      target_fields: ['course_code', 'course_title', 'learning_outcomes']\n    },\n    alignment_policy: { accept_threshold: 0.65 }\n  };\n}\n\nreturn [{ json: plan }];"
      },
      "id": "ParsePlan",
      "name": "Parse Controller Plan",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Build a list of syllabus sources to analyze\nlet syllabi = [];\n\n// Extract URLs from the seed syllabi config\ntry {\n  const seedSyllabi = $node['Config'].json.SEED_SYLLABI || '';\n  syllabi = seedSyllabi\n    .split(';')\n    .map(url => url.trim())\n    .filter(url => url.length > 0);\n} catch (e) {\n  console.log('Error processing seed syllabi:', e.message);\n}\n\n// Add demo URLs if no seed syllabi provided\nif (syllabi.length === 0) {\n  syllabi.push('https://example.edu/course/cs101/syllabus.pdf');\n  syllabi.push('https://another.edu/ai/ai101_syllabus.pdf');\n}\n\n// Limit to maximum number of sources\nconst max = parseInt($node['Config'].json.MAX_SOURCES || 3, 10);\nconst limitedSyllabi = syllabi.slice(0, max);\n\n// Return the list of sources\nreturn limitedSyllabi.map(url => ({\n  json: { url }\n}));"
      },
      "id": "BuildSourceList",
      "name": "Build Source List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "batchSize": 1
      },
      "id": "SplitSources",
      "name": "Split Sources",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "content": "=This is a syllabus for CS101: Introduction to Computer Science.\n\nInstructor: Dr. Jane Smith (jsmith@example.edu)\nTerm: Fall 2025\nProgram: Computer Science\nModality: In-person with online components\nWorkload: 10 hours per week\n\nCourse Description:\nThis introductory course covers fundamental concepts in computer science including programming basics, algorithms, data structures, and problem-solving approaches.\n\nLearning Outcomes:\nBy the end of this course, students will be able to:\n1. Write basic programs using Python programming language\n2. Analyze and solve problems using computational thinking\n3. Implement fundamental data structures and algorithms\n4. Explain basic software engineering principles\n5. Collaborate effectively on software development projects\n\nTopics:\n- Programming fundamentals\n- Variables, data types, and operators\n- Control structures and loops\n- Functions and modular programming\n- Basic data structures (lists, dictionaries)\n- Introduction to object-oriented programming\n- Basic algorithms and algorithm analysis\n- Software development lifecycle\n\nRequired Textbooks:\n- \"Python Programming: An Introduction to Computer Science\" by John Zelle\n- \"Think Python\" by Allen Downey (available online)\n\nAssessments:\n- Weekly programming assignments (40%)\n- Midterm exam (20%)\n- Final project (30%)\n- Participation and quizzes (10%)\n\nTools:\n- Python 3.10\n- Visual Studio Code\n- Git and GitHub\n- JupyterLab",
        "options": {}
      },
      "id": "DemoSyllabusText",
      "name": "Demo Syllabus Text",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [1500, 300]
    },
    {
      "parameters": {
        "content": "={\n  \"course_code\": \"CS101\",\n  \"course_title\": \"Introduction to Computer Science\",\n  \"term\": \"Fall 2025\",\n  \"instructor\": \"Dr. Jane Smith\",\n  \"program\": \"Computer Science\",\n  \"modality\": \"In-person with online components\",\n  \"workload\": \"10 hours per week\",\n  \"tools\": [\n    \"Python 3.10\",\n    \"Visual Studio Code\",\n    \"Git and GitHub\",\n    \"JupyterLab\"\n  ],\n  \"learning_outcomes\": [\n    \"Write basic programs using Python programming language\",\n    \"Analyze and solve problems using computational thinking\",\n    \"Implement fundamental data structures and algorithms\",\n    \"Explain basic software engineering principles\",\n    \"Collaborate effectively on software development projects\"\n  ],\n  \"competencies\": [\n    \"Python programming\",\n    \"Computational thinking\",\n    \"Data structure implementation\",\n    \"Algorithm implementation\",\n    \"Software engineering principles\",\n    \"Collaborative development\"\n  ],\n  \"topics\": [\n    \"Programming fundamentals\",\n    \"Variables, data types, and operators\",\n    \"Control structures and loops\",\n    \"Functions and modular programming\",\n    \"Basic data structures\",\n    \"Introduction to object-oriented programming\",\n    \"Basic algorithms and algorithm analysis\",\n    \"Software development lifecycle\"\n  ],\n  \"readings\": [\n    \"Python Programming: An Introduction to Computer Science by John Zelle\",\n    \"Think Python by Allen Downey\"\n  ],\n  \"assessments\": [\n    \"Weekly programming assignments (40%)\",\n    \"Midterm exam (20%)\",\n    \"Final project (30%)\",\n    \"Participation and quizzes (10%)\"\n  ],\n  \"source_url\": \"{{$json.url}}\",\n  \"soft_confidence\": 0.85,\n  \"reasons\": []\n}",
        "options": {}
      },
      "id": "DemoExtraction",
      "name": "Demo LLM Extraction",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [1700, 300]
    },
    {
      "parameters": {
        "content": "={\n  \"mapped_skills\": [\n    {\n      \"skill\": \"Python Programming\",\n      \"confidence\": 0.95\n    },\n    {\n      \"skill\": \"Software Engineering Principles\",\n      \"confidence\": 0.88\n    },\n    {\n      \"skill\": \"Data Structures\",\n      \"confidence\": 0.85\n    },\n    {\n      \"skill\": \"Algorithm Analysis\",\n      \"confidence\": 0.82\n    },\n    {\n      \"skill\": \"Computational Thinking\",\n      \"confidence\": 0.79\n    }\n  ],\n  \"unmapped_phrases\": [\n    \"Collaborative development\"\n  ],\n  \"alignment_notes\": [\n    \"Strong alignment with programming and software engineering skills\",\n    \"Some competencies like 'Collaborative development' don't have direct skill matches in the taxonomy\"\n  ]\n}",
        "options": {}
      },
      "id": "DemoAlignment",
      "name": "Demo LLM Alignment",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [1900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse extraction and alignment results\nlet extraction = {};\ntry {\n  const extractionData = $node['DemoExtraction'].json;\n  if (typeof extractionData === 'string') {\n    extraction = JSON.parse(extractionData);\n  } else {\n    extraction = extractionData;\n  }\n} catch (e) {\n  console.log('Error parsing extraction:', e.message);\n  extraction = {};\n}\n\nlet alignment = {};\ntry {\n  const alignmentData = $node['DemoAlignment'].json;\n  if (typeof alignmentData === 'string') {\n    alignment = JSON.parse(alignmentData);\n  } else {\n    alignment = alignmentData;\n  }\n} catch (e) {\n  console.log('Error parsing alignment:', e.message);\n  alignment = {};\n}\n\n// Check confidence threshold\nconst threshold = parseFloat($node['Config'].json.CONFIDENCE_THRESHOLD || 0.70);\nconst ok = (extraction.soft_confidence || 0) >= threshold && \n           Array.isArray(extraction.learning_outcomes) && \n           extraction.learning_outcomes.length > 0;\n\n// Build the final record\nconst record = {\n  course_code: extraction.course_code || null,\n  course_title: extraction.course_title || null,\n  term: extraction.term || null,\n  instructor: extraction.instructor || null,\n  program: extraction.program || null,\n  modality: extraction.modality || null,\n  workload: extraction.workload || null,\n  tools: extraction.tools || [],\n  learning_outcomes: extraction.learning_outcomes || [],\n  competencies: extraction.competencies || [],\n  topics: extraction.topics || [],\n  readings: extraction.readings || [],\n  assessments: extraction.assessments || [],\n  mapped_skills: alignment.mapped_skills || [],\n  unmapped_phrases: alignment.unmapped_phrases || [],\n  alignment_notes: alignment.alignment_notes || [],\n  source_url: extraction.source_url || $json.url || null,\n  soft_confidence: extraction.soft_confidence || 0,\n  needs_review: !ok,\n  reasons: (extraction.reasons || []).concat(ok ? [] : ['low-confidence']),\n  harvest_run_ts: new Date().toISOString()\n};\n\nreturn [{ json: { record } }];"
      },
      "id": "BuildRecord",
      "name": "Build JSON Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2100, 300]
    },
    {
      "parameters": {
        "path": "=/jesse/syllabi/{{$json.record.course_code || 'unknown_course'}}.json",
        "options": {}
      },
      "id": "WriteFile",
      "name": "Write Result to File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [2300, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node['Config'].json.DISCORD_CHANNEL_ID}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "CheckDiscordConfig",
      "name": "Check if Discord is Configured",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2300, 300]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "send",
        "channelId": "={{$node['Config'].json.DISCORD_CHANNEL_ID}}",
        "message": "Syllabus processed {{ $json.record.needs_review ? '⚠️ NEEDS REVIEW' : '✅ OK' }}\nCourse: {{ $json.record.course_code || '' }} {{ $json.record.course_title || 'Unknown Course' }}\nConfidence: {{ $json.record.soft_confidence.toFixed(2) }}\nOutcomes: {{ $json.record.learning_outcomes.length || 0 }}\nMapped skills: {{ ($json.record.mapped_skills || []).slice(0,3).map(x => x.skill).join(', ') || 'None' }}"
      },
      "id": "DiscordNotify",
      "name": "Discord: Notify",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 1,
      "position": [2500, 250]
    },
    {
      "parameters": {
        "content": "={\n  \"rules\": [\n    \"Look for 'Learning Outcomes' or 'Course Objectives' sections\",\n    \"Learning outcomes often begin with 'Students will be able to' or similar phrases\",\n    \"Course codes typically follow format of department prefix + number (e.g., CS101)\",\n    \"Extract instructor name and contact information when available\"\n  ],\n  \"keywords\": [\n    \"learning outcomes\",\n    \"objectives\",\n    \"competencies\",\n    \"syllabus\",\n    \"assessment\",\n    \"readings\",\n    \"textbook\",\n    \"prerequisites\",\n    \"grading\"\n  ],\n  \"regexes\": [\n    \"/[A-Z]{2,4}\\\\s?\\\\d{3,4}/i\",  \n    \"/(?:Spring|Fall|Summer|Winter)\\\\s\\\\d{4}/i\",\n    \"/\\\\b(?:Dr\\\\.|Professor|Prof\\\\.)\\\\s[A-Z][a-z]+\\\\s[A-Z][a-z]+/\"\n  ],\n  \"notes\": [\n    \"Focus on academic terminology common in syllabi\",\n    \"Outcome statements typically use action verbs from Bloom's taxonomy\",\n    \"Updated based on recent syllabus analyses\"\n  ]\n}",
        "options": {}
      },
      "id": "DemoDistillOutput",
      "name": "Demo Distillation Output",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [2300, 400]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node['SplitSources'].context.currentRunIndex}}",
              "operation": "smaller",
              "value2": "={{parseInt($node['Config'].json.MAX_SOURCES || 3) - 1}}"
            }
          ]
        }
      },
      "id": "CheckMoreSources",
      "name": "Check for More Sources",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2300, 500]
    },
    {
      "parameters": {},
      "id": "NextSource",
      "name": "Next Source",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2500, 500]
    },
    {
      "parameters": {},
      "id": "WorkflowDone",
      "name": "Workflow Complete",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2500, 600]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "DemoDistilledRules",
            "type": "main",
            "index": 0
          },
          {
            "node": "DemoTaxonomy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoDistilledRules": {
      "main": [
        [
          {
            "node": "DemoPlan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoTaxonomy": {
      "main": [
        [
          {
            "node": "DemoPlan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoPlan": {
      "main": [
        [
          {
            "node": "ParsePlan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ParsePlan": {
      "main": [
        [
          {
            "node": "BuildSourceList",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BuildSourceList": {
      "main": [
        [
          {
            "node": "SplitSources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitSources": {
      "main": [
        [
          {
            "node": "DemoSyllabusText",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoSyllabusText": {
      "main": [
        [
          {
            "node": "DemoExtraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoExtraction": {
      "main": [
        [
          {
            "node": "DemoAlignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoAlignment": {
      "main": [
        [
          {
            "node": "BuildRecord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BuildRecord": {
      "main": [
        [
          {
            "node": "WriteFile",
            "type": "main",
            "index": 0
          },
          {
            "node": "CheckDiscordConfig",
            "type": "main",
            "index": 0
          },
          {
            "node": "DemoDistillOutput",
            "type": "main",
            "index": 0
          },
          {
            "node": "CheckMoreSources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CheckDiscordConfig": {
      "main": [
        [
          {
            "node": "DiscordNotify",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "DemoDistillOutput": {
      "main": [
        []
      ]
    },
    "CheckMoreSources": {
      "main": [
        [
          {
            "node": "NextSource",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WorkflowDone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NextSource": {
      "main": [
        [
          {
            "node": "SplitSources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "versionId": "1",
  "meta": {
    "instanceId": "demo-instance",
    "description": "Simplified syllabi analysis agent with static demo data to help students learn the workflow structure."
  }
}