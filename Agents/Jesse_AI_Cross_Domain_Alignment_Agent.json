{
  "name": "Jesse — AI Cross-Domain Alignment Agent",
  "nodes": [
    {
      "parameters": {},
      "id": "Start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            { "name": "PROGRAMS_SOURCE_URL", "value": "https://api.example.com/jesse/programs" },
            { "name": "CAREERS_SOURCE_URL", "value": "https://api.example.com/jesse/careers" },
            { "name": "JOBS_SOURCE_URL", "value": "https://api.example.com/jesse/job_postings" },
            { "name": "DISCORD_CHANNEL_ID", "value": "" },
            { "name": "REGION", "value": "United States" },
            { "name": "MAX_PAIRS", "value": "10" }
          ]
        }
      },
      "id": "Config",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "url": "=https://jsonplaceholder.typicode.com/users",
        "authentication": "none",
        "options": {}
      },
      "id": "FetchPrograms",
      "name": "Fetch Programs (Demo)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 200]
    },
    {
      "parameters": {
        "url": "=https://jsonplaceholder.typicode.com/posts?userId=1",
        "authentication": "none",
        "options": {}
      },
      "id": "FetchCareers",
      "name": "Fetch Careers (Demo)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 300]
    },
    {
      "parameters": {
        "url": "=https://jsonplaceholder.typicode.com/posts?userId=2",
        "authentication": "none",
        "options": {}
      },
      "id": "FetchJobs",
      "name": "Fetch Job Postings (Demo)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 400]
    },
    {
      "parameters": {
        "functionCode": "// Sample data for testing\nconst users = $node['FetchPrograms'].json;\nconst posts = $node['FetchCareers'].json;\n\n// Create pairs from users and posts\nconst pairs = [];\nfor (let i = 0; i < Math.min(3, users.length); i++) {\n  const user = users[i];\n  for (let j = 0; j < Math.min(2, posts.length); j++) {\n    const post = posts[j];\n    pairs.push({\n      program: {\n        id: user.id,\n        title: user.name,\n        discipline: user.company.name\n      },\n      career: {\n        id: post.id,\n        title: post.title,\n        cluster: 'Sample Cluster'\n      },\n      _position: pairs.length\n    });\n  }\n}\n\nconst max = parseInt($node['Config'].json.MAX_PAIRS || 10);\nconst limited = pairs.slice(0, max);\n\n// Return formatted pairs\nreturn limited.map(x => ({ json: x }));"
      },
      "id": "BuildPairs",
      "name": "Build Program–Career Pairs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "batchSize": 1
      },
      "id": "SplitPairs",
      "name": "Split Pairs",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "content": "=# Program-Career Comparison\n\n## Program: {{$json.program.title}}\nDiscipline: {{$json.program.discipline}}\n\n## Career: {{$json.career.title}}\nCluster: {{$json.career.cluster}}\n\n## Similarity Analysis\n- Similarity Score: 0.75\n- Coverage Rate: 0.65\n\n## Skills Gap Analysis\n1. Data visualization techniques\n2. Cloud infrastructure management\n3. Agile project management\n\n*This is a demo template - in a real implementation, this would call an LLM*",
        "options": {}
      },
      "id": "DemoLLMSimilarity",
      "name": "Demo LLM Similarity (Placeholder)",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "functionCode": "// Create a structured object from the template content\n// In a real workflow, this would parse an LLM response\n\nconst demoSimilarity = 0.75;\nconst demoCoverageRate = 0.65;\nconst demoMatchedSkills = [\n  \"Programming fundamentals\",\n  \"Database design\",\n  \"Web development\"\n];\nconst demoGaps = [\n  { skill: \"Data visualization techniques\", why_critical: \"Essential for conveying insights\" },\n  { skill: \"Cloud infrastructure management\", why_critical: \"Required for modern deployments\" },\n  { skill: \"Agile project management\", why_critical: \"Industry standard methodology\" }\n];\n\n// Sample demo calculation\nconst weights = {\n  skills_coverage: 0.35,\n  demand: 0.25,\n  salary: 0.15,\n  alignment_confidence: 0.15,\n  gap_penalty: 0.10\n};\n\nconst demandScore = 0.8;\nconst salaryScore = 0.7;\nconst confidenceScore = 0.85;\nconst gapPenalty = demoGaps.length / 10;\n\nconst objective = (\n  weights.skills_coverage * demoCoverageRate +\n  weights.demand * demandScore +\n  weights.salary * salaryScore +\n  weights.alignment_confidence * confidenceScore -\n  weights.gap_penalty * gapPenalty\n).toFixed(4);\n\nreturn [{\n  json: {\n    similarity: demoSimilarity,\n    coverage_rate: demoCoverageRate,\n    demand_score: demandScore,\n    salary_score: salaryScore,\n    confidence: confidenceScore,\n    gap_penalty: gapPenalty,\n    objective: Number(objective),\n    matched_skills: demoMatchedSkills,\n    gaps: demoGaps,\n    program: $json.program,\n    career: $json.career,\n    _position: $json._position\n  }\n}];"
      },
      "id": "ScoreMO",
      "name": "Score Multi-Objective",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "content": "=# Curriculum Enhancement Recommendations\n\n## For Program: {{$json.program.title}}\n## Target Career: {{$json.career.title}}\n\n### Recommendations:\n\n1. **New Module**: Data Visualization Fundamentals\n   - Focus on tableau, D3.js, and visual storytelling techniques\n\n2. **Course Enhancement**: Cloud Computing Principles\n   - Add AWS/Azure practical labs and certification preparation\n\n3. **Capstone Project**: Agile Team Development Project\n   - Industry-partnered project using scrum methodology\n\n*This is a demo template - in a real implementation, this would call an LLM*",
        "options": {}
      },
      "id": "DemoLLMRecommend",
      "name": "Demo LLM Recommendations (Placeholder)",
      "type": "n8n-nodes-base.textTemplate",
      "typeVersion": 1,
      "position": [1500, 300]
    },
    {
      "parameters": {
        "functionCode": "// Create the final record combining all data\n// In a real implementation, this would parse the LLM recommendation response\n\nconst demoRecommendations = [\n  {\n    type: \"module\",\n    title: \"Data Visualization Fundamentals\",\n    summary: \"Focus on tableau, D3.js, and visual storytelling techniques\",\n    target_skills: [\"Data visualization\", \"Visual storytelling\"]\n  },\n  {\n    type: \"course\",\n    title: \"Cloud Computing Principles\",\n    summary: \"Add AWS/Azure practical labs and certification preparation\",\n    target_skills: [\"Cloud infrastructure\", \"DevOps\"]\n  },\n  {\n    type: \"project\",\n    title: \"Agile Team Development Project\",\n    summary: \"Industry-partnered project using scrum methodology\",\n    target_skills: [\"Agile project management\", \"Team collaboration\"]\n  }\n];\n\nconst demoRationale = [\n  \"These enhancements address the critical skills gaps identified in the analysis\",\n  \"The modifications maintain the core identity of the program while making it more relevant to industry needs\"\n];\n\n// Thresholds for acceptance\nconst thresholds = {\n  min_alignment: 0.62,\n  min_confidence: 0.70\n};\n\n// Determine if the alignment is acceptable\nconst isAccepted = ($json.objective >= thresholds.min_alignment) && \n                  ($json.confidence >= thresholds.min_confidence);\n\n// Create the complete record\nconst record = {\n  program_id: $json.program.id,\n  program_title: $json.program.title,\n  career_id: $json.career.id,\n  career_title: $json.career.title,\n  region: $node['Config'].json.REGION,\n  similarity: $json.similarity,\n  coverage_rate: $json.coverage_rate,\n  demand_score: $json.demand_score,\n  salary_score: $json.salary_score,\n  alignment_confidence: $json.confidence,\n  gap_penalty: $json.gap_penalty,\n  objective_score: $json.objective,\n  matched_skills: $json.matched_skills,\n  gaps: $json.gaps,\n  recommendations: demoRecommendations,\n  recommendation_rationale: demoRationale,\n  accepted: isAccepted,\n  thresholds: thresholds,\n  pair_position: $json._position || 0,\n  run_ts: new Date().toISOString()\n};\n\nreturn [{ json: { record } }];"
      },
      "id": "BuildRecord",
      "name": "Build JSON Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 300]
    },
    {
      "parameters": {
        "path": "=/jesse/alignment/{{$json.record.program_id}}_{{$json.record.career_id}}.json",
        "options": {}
      },
      "id": "WriteFile",
      "name": "Write Result to File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [1900, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node['Config'].json.DISCORD_CHANNEL_ID}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "CheckDiscordConfig",
      "name": "Check if Discord is Configured",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1900, 300]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "send",
        "channelId": "={{$node['Config'].json.DISCORD_CHANNEL_ID}}",
        "message": "Alignment {{ $json.record.accepted ? '✅ (ACCEPTED)' : '⚠️ (REVIEW SUGGESTED)' }}\nProgram: {{ $json.record.program_title }}\nCareer: {{ $json.record.career_title }}\nScore: {{ $json.record.objective_score.toFixed(2) }} | Conf: {{ $json.record.alignment_confidence.toFixed(2) }}\nTop gaps: {{ ($json.record.gaps || []).slice(0,3).map(g => g.skill).join(', ') }}"
      },
      "id": "DiscordNotify",
      "name": "Discord: Notify",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 1,
      "position": [2100, 250]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.record.pair_position}}",
              "operation": "smaller",
              "value2": 5
            }
          ]
        }
      },
      "id": "CheckMorePairs",
      "name": "Check for More Pairs",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1900, 400]
    },
    {
      "parameters": {},
      "id": "NextPair",
      "name": "Next Pair",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2100, 400]
    },
    {
      "parameters": {},
      "id": "WorkflowDone",
      "name": "Workflow Complete",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2100, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "FetchPrograms",
            "type": "main",
            "index": 0
          },
          {
            "node": "FetchCareers",
            "type": "main",
            "index": 0
          },
          {
            "node": "FetchJobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FetchPrograms": {
      "main": [
        []
      ]
    },
    "FetchCareers": {
      "main": [
        []
      ]
    },
    "FetchJobs": {
      "main": [
        []
      ]
    },
    "BuildPairs": {
      "main": [
        [
          {
            "node": "SplitPairs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitPairs": {
      "main": [
        [
          {
            "node": "DemoLLMSimilarity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoLLMSimilarity": {
      "main": [
        [
          {
            "node": "ScoreMO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ScoreMO": {
      "main": [
        [
          {
            "node": "DemoLLMRecommend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DemoLLMRecommend": {
      "main": [
        [
          {
            "node": "BuildRecord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BuildRecord": {
      "main": [
        [
          {
            "node": "WriteFile",
            "type": "main",
            "index": 0
          },
          {
            "node": "CheckDiscordConfig",
            "type": "main",
            "index": 0
          },
          {
            "node": "CheckMorePairs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CheckDiscordConfig": {
      "main": [
        [
          {
            "node": "DiscordNotify",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "CheckMorePairs": {
      "main": [
        [
          {
            "node": "NextPair",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WorkflowDone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NextPair": {
      "main": [
        [
          {
            "node": "SplitPairs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FetchCareers": {
      "main": [
        []
      ]
    },
    "FetchJobs": {
      "main": [
        []
      ]
    },
    "FetchPrograms": {
      "main": [
        [
          {
            "node": "BuildPairs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "versionId": "1",
  "meta": {
    "instanceId": "demo-instance"
  }
}